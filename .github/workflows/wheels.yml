name: Build and Publish Wheels

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Build wheels for all supported Python versions on each OS
      - name: Build wheels with maturin
        uses: PyO3/maturin-action@v1
        with:
          # Build for multiple Python versions
          target: ${{ matrix.os == 'macos-latest' && 'universal2-apple-darwin' || '' }}
          manylinux: ${{ matrix.os == 'ubuntu-latest' && 'auto' || '' }}
          command: build
          args: --release --interpreter 3.8 3.9 3.10 3.11 3.12 --out dist

      # Only build sdist once on Ubuntu
      - name: Build sdist
        if: matrix.os == 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      # Upload artifacts with OS-specific names to avoid conflicts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/*
          if-no-files-found: error

  # Test wheels before publishing
  test-wheels:
    name: Test wheels (${{ matrix.os }})
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist

      - name: Test wheel installation
        shell: bash
        run: |
          # Find compatible wheel for current Python version
          python_version_short=$(python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')")
          wheel_file=$(find dist -name "*cp${python_version_short}*" -name "*.whl" | head -1)
          
          if [ -n "$wheel_file" ]; then
            echo "Testing wheel: $wheel_file"
            pip install "$wheel_file"
            python -c "
            import blazemetrics
            from blazemetrics import rouge_score, bleu
            candidates = ['test']
            references = [['test']]
            rouge_score(candidates, references, score_type='rouge_n', n=1)
            bleu(candidates, references)
            print('Wheel test passed!')
            "
          else
            echo "No compatible wheel found for Python $python_version_short"
            ls -la dist/
          fi

  publish:
    name: Publish to PyPI
    needs: [build-wheels, test-wheels]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Prepare upload directory
        shell: bash
        run: |
          mkdir -p upload
          # Copy all wheels and source distributions
          find dist-artifacts -name "*.whl" -exec cp {} upload/ \;
          find dist-artifacts -name "*.tar.gz" -exec cp {} upload/ \;
          
          echo "Files to upload:"
          ls -la upload/
          
          # Verify we have the expected number of files
          wheel_count=$(find upload -name "*.whl" | wc -l)
          echo "Found $wheel_count wheel files"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: upload
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true